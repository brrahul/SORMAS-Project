apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.firebase-perf'

ext.sormasVersion = getVersionName()
ext.keystoreProperties = loadKeystoreProperties()

android {
    // https://medium.com/google-developers/picking-your-compilesdkversion-minsdkversion-targetsdkversion-a098a0341ebd
    // ideally: minSdkVersion (lowest possible) <= targetSdkVersion == compileSdkVersion (latest SDK)
    compileSdkVersion 29
    // always use the latest
    buildToolsVersion '28.0.3'

    defaultConfig {
        applicationId "de.symeda.sormas.app"
        minSdkVersion 24
        targetSdkVersion 29
        versionCode buildVersionCode()
        versionName "$sormasVersion"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        setProperty("archivesBaseName", "sormas-$versionName")
        multiDexEnabled true
    }
    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            testCoverageEnabled true
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    packagingOptions {
        exclude 'META-INF/maven/de.symeda.sormas/sormas-api/pom.properties'
        exclude 'META-INF/maven/de.symeda.sormas/sormas-api/pom.xml'
    }
    dataBinding {
        enabled = true
    }
    productFlavors {
    }

    lintOptions {
        abortOnError false
    }
    defaultConfig {
        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled true
        unitTests {
            includeAndroidResources = true
        }
    }

    // needed for pre androidx testing. This will not make it's way into the apk
    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

repositories {
    mavenLocal()
    google()
    maven { url "https://maven.repository.redhat.com/ga/" }
}

dependencies {
    def lifecycle_version = "2.2.0"
    def paging_version = "2.1.1"

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.2.0-alpha04'
    implementation 'androidx.percentlayout:percentlayout:1.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.4.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.4.0'
    implementation 'com.j256.ormlite:ormlite-core:5.1'
    implementation 'com.j256.ormlite:ormlite-android:5.1'
    implementation 'javax.persistence:persistence-api:1.0.2'
    implementation 'com.google.firebase:firebase-core:17.2.2'
    implementation 'com.google.firebase:firebase-perf:19.0.5'
    implementation 'com.google.firebase:firebase-config:19.1.1'
    implementation 'com.google.firebase:firebase-analytics:17.2.2'
    implementation 'com.crashlytics.sdk.android:crashlytics:2.10.1'
    implementation "de.symeda.sormas:sormas-api:$sormasVersion"
    implementation 'com.googlecode:openbeans:1.0'
    implementation files('libs/MPAndroidChart-v3.0.2.jar')
    implementation(name: 'CircleProgress-v1.2.1', ext: 'aar')
    implementation 'io.reactivex:rxandroid:1.0.1'
    implementation 'io.reactivex:rxjava:1.0.14'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.9.8'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.9.8'
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.paging:paging-runtime:$paging_version"
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.robolectric:robolectric:4.2.1'
    testImplementation 'org.mockito:mockito-core:1.10.19'
    androidTestImplementation 'androidx.annotation:annotation:1.1.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.0.0'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'

// Use of org.jacoco:org.jacoco.core, see https://www.rallyhealth.com/coding/code-coverage-for-android-testing
apply plugin: 'jacoco'

jacoco {
    toolVersion = '0.8.5'
}
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}
task jacocoUnitTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    // Location of the build directory for the build Variant
//    $buildDir =
    def coverageSourceDirs = [
        "${project.projectDir}/src/main/java"
    ]
    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/*$ViewInjector*.*',
        '**/*$ViewBinder*.*',
        '**/BuildConfig.*',
        '**/Manifest*.*'
    ]
    def javaClasses = fileTree(
        dir: "$buildDir/intermediates/classes/debug",
        excludes: fileFilter
    )
    classDirectories = files([ javaClasses ])
    additionalSourceDirs = files(coverageSourceDirs)
    sourceDirectories = files(coverageSourceDirs)
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
    ])
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

apply plugin: 'org.sonarqube'

sonarqube {
    properties {
        property "sonar.projectKey", "de.symeda.sormas:sormas-app"
        property "sonar.projectVersion", "$sormasVersion"
        property "sonar.projectName", "sormas-app"
    }
}
